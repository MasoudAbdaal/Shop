// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using Shop.Data;

#nullable disable

namespace Shop.Migrations
{
    [DbContext(typeof(UserContext))]
    partial class UserContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Shop.Models.Address", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID"));

                    b.Property<string>("AddressLine")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("address_line");

                    b.Property<Point>("Location")
                        .HasColumnType("geography")
                        .HasColumnName("location");

                    b.Property<string>("LocationAddress")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("location_address");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("postal_code");

                    b.Property<long>("RegionID")
                        .HasColumnType("bigint")
                        .HasColumnName("region_id");

                    b.Property<int>("UnitNumber")
                        .HasColumnType("int")
                        .HasColumnName("unit_number");

                    b.HasKey("ID");

                    b.HasIndex("RegionID");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("Shop.Models.AuthProvider", b =>
                {
                    b.Property<byte>("ID")
                        .HasColumnType("tinyint")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("name");

                    b.HasKey("ID");

                    b.ToTable("AuthProviders");

                    b.HasData(
                        new
                        {
                            ID = (byte)0,
                            Name = "EMAIL"
                        },
                        new
                        {
                            ID = (byte)1,
                            Name = "GOOGLE"
                        },
                        new
                        {
                            ID = (byte)2,
                            Name = "FACEBOOK"
                        },
                        new
                        {
                            ID = (byte)3,
                            Name = "MICROSOFT"
                        });
                });

            modelBuilder.Entity("Shop.Models.Category", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("name");

                    b.Property<int?>("ParentID")
                        .HasColumnType("int")
                        .HasColumnName("parent_id");

                    b.HasKey("ID");

                    b.HasIndex("ParentID");

                    b.ToTable("Product_Categories");
                });

            modelBuilder.Entity("Shop.Models.Description", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID"));

                    b.HasKey("ID");

                    b.ToTable("Product_Descriptions");
                });

            modelBuilder.Entity("Shop.Models.Product", b =>
                {
                    b.Property<long>("ID")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID"));

                    b.Property<int>("CategoryID")
                        .HasColumnType("int")
                        .HasColumnName("category_id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("description");

                    b.Property<long>("FullDescriptionID")
                        .HasColumnType("bigint")
                        .HasColumnName("full_description_id");

                    b.Property<byte[]>("Image")
                        .IsRequired()
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("image");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)")
                        .HasColumnName("name");

                    b.HasKey("ID");

                    b.HasIndex("CategoryID");

                    b.HasIndex("FullDescriptionID")
                        .IsUnique();

                    b.HasIndex("ID")
                        .IsUnique();

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Shop.Models.ProductConf", b =>
                {
                    b.Property<byte?>("ProductItemID")
                        .HasColumnType("tinyint")
                        .HasColumnName("product_item_id");

                    b.Property<int>("VariationOptionID")
                        .HasColumnType("int")
                        .HasColumnName("variation_option_id");

                    b.HasKey("ProductItemID", "VariationOptionID");

                    b.HasIndex("VariationOptionID");

                    b.ToTable("Product_Conf");
                });

            modelBuilder.Entity("Shop.Models.ProductItem", b =>
                {
                    b.Property<byte>("ID")
                        .IsConcurrencyToken()
                        .HasColumnType("tinyint")
                        .HasColumnName("id");

                    b.Property<decimal>("Price")
                        .HasColumnType("Money")
                        .HasColumnName("price");

                    b.Property<long>("ProductID")
                        .HasColumnType("bigint")
                        .HasColumnName("product_id");

                    b.Property<long>("Quantity")
                        .HasColumnType("bigint")
                        .HasColumnName("quantity");

                    b.Property<byte[]>("SKU")
                        .HasMaxLength(110000)
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("sku");

                    b.HasKey("ID");

                    b.HasIndex("ProductID");

                    b.ToTable("Product_Items");
                });

            modelBuilder.Entity("Shop.Models.Promotion", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Description")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)")
                        .HasColumnName("description");

                    b.Property<DateTime?>("DiscountEndDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("end_date");

                    b.Property<byte>("DiscountRate")
                        .HasColumnType("tinyint")
                        .HasColumnName("rate");

                    b.Property<DateTime?>("DiscountStartDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("start_date");

                    b.Property<string>("Name")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("name");

                    b.HasKey("ID");

                    b.ToTable("Product_Promotions");
                });

            modelBuilder.Entity("Shop.Models.PromotionCategory", b =>
                {
                    b.Property<int>("CategoryID")
                        .HasColumnType("int")
                        .HasColumnName("category_id");

                    b.Property<int>("PromotionID")
                        .HasColumnType("int")
                        .HasColumnName("promotion_id");

                    b.HasKey("CategoryID", "PromotionID");

                    b.HasIndex("PromotionID");

                    b.ToTable("Product_PromotionCategories");
                });

            modelBuilder.Entity("Shop.Models.Region", b =>
                {
                    b.Property<long>("RegionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("RegionID"));

                    b.Property<string>("Name")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("name");

                    b.Property<long?>("ParentID")
                        .HasColumnType("bigint")
                        .HasColumnName("parent_id");

                    b.HasKey("RegionID");

                    b.HasIndex("ParentID");

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("Shop.Models.Role", b =>
                {
                    b.Property<long>("ID")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.HasKey("ID");

                    b.ToTable("User_Roles");

                    b.HasData(
                        new
                        {
                            ID = 0L,
                            Name = "ADMIN"
                        },
                        new
                        {
                            ID = 1L,
                            Name = "SELLER"
                        },
                        new
                        {
                            ID = 2L,
                            Name = "PURCHASER"
                        });
                });

            modelBuilder.Entity("Shop.Models.User", b =>
                {
                    b.Property<byte[]>("ID")
                        .IsConcurrencyToken()
                        .HasMaxLength(16)
                        .HasColumnType("Binary")
                        .HasColumnName("id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("email");

                    b.Property<long?>("Email_Code")
                        .HasColumnType("bigint")
                        .HasColumnName("email_2step_code");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("name");

                    b.Property<byte[]>("Password")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("Binary")
                        .HasColumnName("password");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("Binary")
                        .HasColumnName("password_salt");

                    b.Property<byte[]>("ResetPasswordToken")
                        .HasMaxLength(128)
                        .HasColumnType("Binary")
                        .HasColumnName("reset_pass_token");

                    b.Property<DateTime?>("ResetPasswordTokenExpires")
                        .HasColumnType("datetime2")
                        .HasColumnName("reset_pass_token_expire_date");

                    b.Property<long>("Role")
                        .HasColumnType("bigint")
                        .HasColumnName("role");

                    b.Property<long?>("SMS_Code")
                        .HasColumnType("bigint")
                        .HasColumnName("sms_2step_code");

                    b.Property<byte[]>("Token")
                        .HasMaxLength(128)
                        .HasColumnType("Binary")
                        .HasColumnName("token");

                    b.Property<DateTime?>("TokenExpireDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("token_expire_date");

                    b.Property<long?>("Token_Code")
                        .HasColumnType("bigint")
                        .HasColumnName("token_2step_code");

                    b.HasKey("ID");

                    b.HasIndex("ID")
                        .IsUnique();

                    b.HasIndex("Role");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Shop.Models.UserAddress", b =>
                {
                    b.Property<byte[]>("UserID")
                        .HasMaxLength(16)
                        .HasColumnType("Binary")
                        .HasColumnName("user_id");

                    b.Property<long>("AddressID")
                        .HasColumnType("bigint")
                        .HasColumnName("address_id");

                    b.HasKey("UserID", "AddressID");

                    b.HasIndex("AddressID");

                    b.ToTable("User_Addressess");
                });

            modelBuilder.Entity("Shop.Models.UserAuthMethod", b =>
                {
                    b.Property<byte[]>("UserID")
                        .HasMaxLength(16)
                        .HasColumnType("Binary")
                        .HasColumnName("user_id");

                    b.Property<byte>("AuthProviderID")
                        .HasColumnType("tinyint")
                        .HasColumnName("auth_provider_id");

                    b.HasKey("UserID", "AuthProviderID");

                    b.HasIndex("AuthProviderID");

                    b.ToTable("User_AuthMethods");
                });

            modelBuilder.Entity("Shop.Models.UserInfo", b =>
                {
                    b.Property<byte[]>("ID")
                        .HasMaxLength(16)
                        .HasColumnType("Binary")
                        .HasColumnName("user_id");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("birthdate");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("createdate");

                    b.Property<bool>("Email_Verified")
                        .HasColumnType("bit")
                        .HasColumnName("is_email_verified");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit")
                        .HasColumnName("account_enabled");

                    b.Property<byte>("FailedLoginAttempts")
                        .HasColumnType("tinyint")
                        .HasColumnName("failed_login_attempts_count");

                    b.Property<string>("LastName")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("lastname");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("phone");

                    b.Property<bool>("PhoneNumber_Verified")
                        .HasColumnType("bit")
                        .HasColumnName("is_phone_verified");

                    b.Property<DateTime?>("VerifiedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("verified_date");

                    b.HasKey("ID");

                    b.ToTable("User_Info");
                });

            modelBuilder.Entity("Shop.Models.UserVerificationMethod", b =>
                {
                    b.Property<byte[]>("UserID")
                        .HasMaxLength(16)
                        .HasColumnType("Binary")
                        .HasColumnName("user_id");

                    b.Property<byte>("VerificationMethodID")
                        .HasColumnType("tinyint")
                        .HasColumnName("verify_method_id");

                    b.HasKey("UserID", "VerificationMethodID");

                    b.HasIndex("VerificationMethodID");

                    b.ToTable("User_VerificationMethods");
                });

            modelBuilder.Entity("Shop.Models.Variation", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int?>("CategoryID")
                        .HasColumnType("int")
                        .HasColumnName("category_id");

                    b.Property<string>("Name")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("name");

                    b.HasKey("ID");

                    b.HasIndex("CategoryID");

                    b.ToTable("Product_Variations");
                });

            modelBuilder.Entity("Shop.Models.VariationOption", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Value")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("value");

                    b.Property<int?>("VariationID")
                        .HasColumnType("int")
                        .HasColumnName("variation_id");

                    b.HasKey("ID");

                    b.HasIndex("VariationID");

                    b.ToTable("Product_VariationOptions");
                });

            modelBuilder.Entity("Shop.Models.VerificationMethod", b =>
                {
                    b.Property<byte>("ID")
                        .HasColumnType("tinyint")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("name");

                    b.HasKey("ID");

                    b.ToTable("VerificationMethods");

                    b.HasData(
                        new
                        {
                            ID = (byte)0,
                            Name = "NONE"
                        },
                        new
                        {
                            ID = (byte)1,
                            Name = "SMS"
                        },
                        new
                        {
                            ID = (byte)2,
                            Name = "EMAIL"
                        },
                        new
                        {
                            ID = (byte)3,
                            Name = "TOKEN"
                        },
                        new
                        {
                            ID = (byte)4,
                            Name = "SMS_AND_EMAIL"
                        });
                });

            modelBuilder.Entity("Shop.Models.Address", b =>
                {
                    b.HasOne("Shop.Models.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Region");
                });

            modelBuilder.Entity("Shop.Models.Category", b =>
                {
                    b.HasOne("Shop.Models.Category", "Categories")
                        .WithMany("SubCategory")
                        .HasForeignKey("ParentID");

                    b.Navigation("Categories");
                });

            modelBuilder.Entity("Shop.Models.Product", b =>
                {
                    b.HasOne("Shop.Models.Category", "Category")
                        .WithMany("Product")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shop.Models.Description", "Descriptions")
                        .WithOne("Product")
                        .HasForeignKey("Shop.Models.Product", "FullDescriptionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Descriptions");
                });

            modelBuilder.Entity("Shop.Models.ProductConf", b =>
                {
                    b.HasOne("Shop.Models.ProductItem", "ProductItems")
                        .WithMany("ProductConf")
                        .HasForeignKey("ProductItemID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shop.Models.VariationOption", "VariationOptions")
                        .WithMany("ProductConf")
                        .HasForeignKey("VariationOptionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductItems");

                    b.Navigation("VariationOptions");
                });

            modelBuilder.Entity("Shop.Models.ProductItem", b =>
                {
                    b.HasOne("Shop.Models.Product", "Product")
                        .WithMany("ProductItem")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Shop.Models.PromotionCategory", b =>
                {
                    b.HasOne("Shop.Models.Category", "Category")
                        .WithMany("PromotionCategory")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shop.Models.Promotion", "Promotion")
                        .WithMany("PromotionCategories")
                        .HasForeignKey("PromotionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Promotion");
                });

            modelBuilder.Entity("Shop.Models.Region", b =>
                {
                    b.HasOne("Shop.Models.Region", "Regions")
                        .WithMany("SubRegion")
                        .HasForeignKey("ParentID");

                    b.Navigation("Regions");
                });

            modelBuilder.Entity("Shop.Models.User", b =>
                {
                    b.HasOne("Shop.Models.Role", "Roles")
                        .WithMany("Users")
                        .HasForeignKey("Role")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Roles");
                });

            modelBuilder.Entity("Shop.Models.UserAddress", b =>
                {
                    b.HasOne("Shop.Models.Address", "Address")
                        .WithMany("UserAddress")
                        .HasForeignKey("AddressID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shop.Models.User", "User")
                        .WithMany("UserAddress")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Shop.Models.UserAuthMethod", b =>
                {
                    b.HasOne("Shop.Models.AuthProvider", "AuthProvider")
                        .WithMany("UserAuthMethod")
                        .HasForeignKey("AuthProviderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shop.Models.User", "Users")
                        .WithMany("UserAuthMethods")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AuthProvider");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Shop.Models.UserInfo", b =>
                {
                    b.HasOne("Shop.Models.User", "User")
                        .WithOne("UserInfo")
                        .HasForeignKey("Shop.Models.UserInfo", "ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Shop.Models.UserVerificationMethod", b =>
                {
                    b.HasOne("Shop.Models.User", "Users")
                        .WithMany("UserVerificationMethods")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shop.Models.VerificationMethod", "VerificationMethod")
                        .WithMany("UserVerificationMethod")
                        .HasForeignKey("VerificationMethodID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Users");

                    b.Navigation("VerificationMethod");
                });

            modelBuilder.Entity("Shop.Models.Variation", b =>
                {
                    b.HasOne("Shop.Models.Category", "Category")
                        .WithMany("Variation")
                        .HasForeignKey("CategoryID");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Shop.Models.VariationOption", b =>
                {
                    b.HasOne("Shop.Models.Variation", "Variation")
                        .WithMany("VariationOption")
                        .HasForeignKey("VariationID");

                    b.Navigation("Variation");
                });

            modelBuilder.Entity("Shop.Models.Address", b =>
                {
                    b.Navigation("UserAddress");
                });

            modelBuilder.Entity("Shop.Models.AuthProvider", b =>
                {
                    b.Navigation("UserAuthMethod");
                });

            modelBuilder.Entity("Shop.Models.Category", b =>
                {
                    b.Navigation("Product");

                    b.Navigation("PromotionCategory");

                    b.Navigation("SubCategory");

                    b.Navigation("Variation");
                });

            modelBuilder.Entity("Shop.Models.Description", b =>
                {
                    b.Navigation("Product");
                });

            modelBuilder.Entity("Shop.Models.Product", b =>
                {
                    b.Navigation("ProductItem");
                });

            modelBuilder.Entity("Shop.Models.ProductItem", b =>
                {
                    b.Navigation("ProductConf");
                });

            modelBuilder.Entity("Shop.Models.Promotion", b =>
                {
                    b.Navigation("PromotionCategories");
                });

            modelBuilder.Entity("Shop.Models.Region", b =>
                {
                    b.Navigation("SubRegion");
                });

            modelBuilder.Entity("Shop.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Shop.Models.User", b =>
                {
                    b.Navigation("UserAddress");

                    b.Navigation("UserAuthMethods");

                    b.Navigation("UserInfo");

                    b.Navigation("UserVerificationMethods");
                });

            modelBuilder.Entity("Shop.Models.Variation", b =>
                {
                    b.Navigation("VariationOption");
                });

            modelBuilder.Entity("Shop.Models.VariationOption", b =>
                {
                    b.Navigation("ProductConf");
                });

            modelBuilder.Entity("Shop.Models.VerificationMethod", b =>
                {
                    b.Navigation("UserVerificationMethod");
                });
#pragma warning restore 612, 618
        }
    }
}
